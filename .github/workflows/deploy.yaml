name: Build, Test, and Push

on:
  push:

jobs:
  security-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout le code source
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configurer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Installer Snyk
      - name: Install Snyk
        run: npm install -g snyk

      # Exécuter Snyk pour vérifier les vulnérabilités Open Source
      - name: Run Snyk Open Source
        run: snyk test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Exécuter Snyk Code pour vérifier les vulnérabilités dans le code
      - name: Run Snyk Code
        run: snyk code test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # Builder l'image Docker pour le test de conteneur
      - name: Build Docker Image
        run: docker build -t my-react-app:latest .

      # Exécuter Snyk Container pour vérifier les vulnérabilités dans l'image Docker
      - name: Run Snyk Container
        run: snyk container test my-react-app:latest
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build-and-deploy:
    needs: security-test
    runs-on: ubuntu-latest

    steps:
      # Checkout le code source
      - name: Checkout Code
        uses: actions/checkout@v3

      # Configurer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      # Installer les dépendances et créer le build
      - name: Install and Build
        run: |
          npm install
          npm run build

      # Builder l'image Docker
      - name: Build Docker Image
        run: |
          docker build -t sarahth/portfolio-srh:latest .

      # Se connecter à DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Pousser l'image vers DockerHub
      - name: Push Docker Image
        run: |
          docker push sarahth/portfolio-srh:latest

      - name: Configure kubectl
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p ~/.kube
          echo $KUBE_CONFIG | base64 --decode > ~/.kube/config
          cat ~/.kube/config

      # Déployer sur Kubernetes
      # - name: Deploy to Kubernetes
      #   run: |
      #     kubectl apply -f deployement/deployement.yaml --validate=false
